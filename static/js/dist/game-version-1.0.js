class AcGameMenu { constructor(t) { this.root = t, this.$menu = $('\n<div class="ac-game-menu">\n    <div class="ac-game-menu-field">\n        <div class="ac-game-menu-field-item ac-game-menu-field-item-single-mode">\n            开始游戏\n        </div>\n        </br>\n        <div class="ac-game-menu-field-item ac-game-menu-field-item-settings">\n            退出\n        </div>\n    </div>\n</div>\n'), this.$menu.hide(), this.root.$ac_game.append(this.$menu), this.$single_mode = this.$menu.find(".ac-game-menu-field-item-single-mode"), this.$settings = this.$menu.find(".ac-game-menu-field-item-settings"), this.start() } start() { this.add_listening_events() } add_listening_events() { let t = this; this.$single_mode.click((function () { t.hide(), t.root.playground.show() })), this.$settings.click((function () { t.root.settings.logout_on_remote() })) } show() { this.$menu.show() } hide() { this.$menu.hide() } } let AC_GAME_OBJECTS = [], last_timestamp; class AcGameObject { constructor() { AC_GAME_OBJECTS.push(this), this.has_called_start = !1, this.timedelta = 0, this.uuid = this.create_uuid() } create_uuid() { let t = ""; for (let s = 0; s < 8; s++) { t += parseInt(Math.floor(10 * Math.random())) } return t } start() { } update() { } late_update() { } on_destroy() { } destroy() { this.on_destroy(); for (let t = 0; t < AC_GAME_OBJECTS.length; t++)if (AC_GAME_OBJECTS[t].uuid === this.uuid) { AC_GAME_OBJECTS.splice(t, 1); break } } } let AC_GAME_ANIMATION = function (t) { for (let s = 0; s < AC_GAME_OBJECTS.length; s++) { let i = AC_GAME_OBJECTS[s]; i.has_called_start ? (i.timedelta = t - last_timestamp, i.update()) : (i.start(), i.has_called_start = !0) } for (let t = 1; t < AC_GAME_OBJECTS.length; t++) { AC_GAME_OBJECTS[t].late_update() } last_timestamp = t, requestAnimationFrame(AC_GAME_ANIMATION) }; requestAnimationFrame(AC_GAME_ANIMATION); class Bullet extends AcGameObject { constructor(t, s, i, e, a, h, r, n) { super(), this.game_map = t, this.player1 = this.game_map.player1, this.player2 = this.game_map.player2, this.crackArray = this.game_map.crackArray, this.enemyArray = this.game_map.enemyArray, this.ctx = s, this.owner = i, this.type = e, this.dir = a, this.map = h, this.bulletArray = r, this.isAI = n, this.x = 0, this.y = 0, this.speed = 3, this.size = 6, this.hit = !1, this.isDestroyed = !1, this.isDraw = !1 } draw() { this.ctx.drawImage(RESOURCE_IMAGE, POS.bullet[0] + this.dir * this.size, POS.bullet[1], this.size, this.size, this.x * MAGNIFICATION, this.y * MAGNIFICATION, this.size * MAGNIFICATION, this.size * MAGNIFICATION), this.isDraw = !0, this.move() } move() { this.dir == UP ? this.y -= this.speed : this.dir == DOWN ? this.y += this.speed : this.dir == RIGHT ? this.x += this.speed : this.dir == LEFT && (this.x -= this.speed), this.isHit() } isHit() { if (!this.isDestroyed) { if (this.x < this.map.offsetX ? (this.x = this.map.offsetX, this.hit = !0) : this.x > this.map.offsetX + this.map.mapWidth - this.size && (this.x = this.map.offsetX + this.map.mapWidth - this.size, this.hit = !0), this.y < this.map.offsetY ? (this.y = this.map.offsetY, this.hit = !0) : this.y > this.map.offsetY + this.map.mapHeight - this.size && (this.y = this.map.offsetY + this.map.mapHeight - this.size, this.hit = !0), !this.hit && null != this.bulletArray && this.bulletArray.length > 0) for (var t = 0; t < this.bulletArray.length; t++)if (this.bulletArray[t] != this && this.owner.isAI != this.bulletArray[t].owner.isAI && 0 == this.bulletArray[t].hit && CheckIntersect(this.bulletArray[t], this, 0)) { this.hit = !0, this.bulletArray[t].hit = !0; break } if (!this.hit) if (bulletMapCollision(this, this.map, this.game_map) && (this.hit = !0), this.type == BULLET_TYPE_PLAYER) { if (null != this.enemyArray || this.enemyArray.length > 0) for (t = 0; t < this.enemyArray.length; t++) { var s = this.enemyArray[t]; if (!s.isDestroyed && CheckIntersect(this, s, 0)) { CheckIntersect(this, s, 0), s.lives > 1 ? s.lives-- : s.destroy(), this.hit = !0; break } } } else this.type == BULLET_TYPE_ENEMY && (this.player1.lives > 0 && CheckIntersect(this, this.player1, 0) ? (this.player1.isProtected || this.player1.isDestroyed || this.player1.destroy(), this.hit = !0) : this.player2.lives > 0 && CheckIntersect(this, this.player2, 0) && (this.player2.isProtected || this.player2.isDestroyed || this.player2.destroy(), this.hit = !0)); this.hit && this.destroy() } } on_destroy() { this.play_destroy_audio(), this.owner.isShooting = !1, this.isDestroyed = !0; for (let t = 0; t < this.bulletArray.length; t++)if (this.bulletArray[t] === this) { this.bulletArray.splice(t, 1); break } } play_destroy_audio() { this.isDestroyed = !0, this.crackArray.push(new CrackAnimation(CRACK_TYPE_BULLET, this.ctx, this)), this.owner.isAI || BULLET_DESTROY_AUDIO.play() } } function CheckIntersect(t, s, i) { let e = t.x + i, a = t.x + t.size - i, h = t.y + i, r = t.y + t.size - i, n = s.x + i, l = s.x + s.size - i, o = s.y + i, p = s.y + s.size - i; return (e >= n && e <= l || a >= n && a <= l) && (h >= o && h <= p || r >= o && r <= p) } function bulletMapCollision(t, s, i) { let e = 0, a = 0, h = 0, r = [], n = !1; if (t.dir == UP ? (a = parseInt((t.y - s.offsetY) / s.tileSize), h = parseInt((t.x - s.offsetX) / s.tileSize)) : t.dir == DOWN ? (a = parseInt((t.y - s.offsetY + t.size) / s.tileSize), h = parseInt((t.x - s.offsetX) / s.tileSize)) : t.dir == LEFT ? (a = parseInt((t.y - s.offsetY) / s.tileSize), h = parseInt((t.x - s.offsetX) / s.tileSize)) : t.dir == RIGHT && (a = parseInt((t.y - s.offsetY) / s.tileSize), h = parseInt((t.x - s.offsetX + t.size) / s.tileSize)), a >= s.HTileCount || a < 0 || h >= s.wTileCount || h < 0) return !0; if (t.dir == UP || t.dir == DOWN) { let l = parseInt(t.x - s.offsetX - h * s.tileSize + t.size); e = l % s.tileSize == 0 ? parseInt(l / s.tileSize) : parseInt(l / s.tileSize) + 1; for (let t = 0; t < e && h + t < s.wTileCount; t++) { let e = s.mapLevel[a][h + t]; if (e == WALL || e == GRID || e == HOME || e == ANOTHREHOME) if (n = !0, e == WALL) r.push([a, h + t]); else if (e != GRID) { i.isGameOver = !0; break } } } else { let l = parseInt(t.y - s.offsetY - a * s.tileSize + t.size); e = l % s.tileSize == 0 ? parseInt(l / s.tileSize) : parseInt(l / s.tileSize) + 1; for (let t = 0; t < e && a + t < s.HTileCount; t++) { let e = s.mapLevel[a + t][h]; if (e == WALL || e == GRID || e == HOME || e == ANOTHREHOME) if (n = !0, e == WALL) r.push([a + t, h]); else if (e != GRID) { i.isGameOver = !0; break } } } return s.updateMap(r, 0), n } let MAGNIFICATION = 1, BASE_SCREEN_WIDTH = 512, BASE_SCREEN_HEIGHT = 448, SCREEN_WIDTH = 512, SCREEN_HEIGHT = 448, MENU_IMAGE = new Image; MENU_IMAGE.src = "https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/playground/menu.gif"; let RESOURCE_IMAGE = new Image; RESOURCE_IMAGE.src = "https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/playground/tankAll.gif"; let POS = new Array; POS.selectTank = [128, 96], POS.stageLevel = [396, 96], POS.num = [256, 96], POS.map = [0, 96], POS.home = [256, 0], POS.score = [0, 112], POS.player = [0, 0], POS.protected = [160, 96], POS.enemyBefore = [256, 32], POS.enemy1 = [0, 32], POS.enemy2 = [128, 32], POS.enemy3 = [0, 64], POS.bullet = [80, 96], POS.tankBomb = [0, 160], POS.bulletBomb = [320, 0], POS.over = [384, 64], POS.prop = [256, 110]; let START_AUDIO = new Audio("https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/audio/start.mp3"), BULLET_DESTROY_AUDIO = new Audio("https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/audio/bulletCrack.mp3"), TANK_DESTROY_AUDIO = new Audio("https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/audio/tankCrack.mp3"), PLAYER_DESTROY_AUDIO = new Audio("https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/audio/playerCrack.mp3"), MOVE_AUDIO = new Audio("https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/audio/move.mp3"), ATTACK_AUDIO = new Audio("https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/audio/attack.mp3"), PROP_AUDIO = new Audio("https://tank-war-static.oss-cn-hangzhou.aliyuncs.com/audio/prop.mp3"), GAME_STATE_MENU = 0, GAME_STATE_INIT = 1, GAME_STATE_START = 2, GAME_STATE_OVER = 3, GAME_STATE_WIN = 4, WALL = 1, GRID = 2, GRASS = 3, WATER = 4, ICE = 5, HOME = 9, ANOTHREHOME = 8, UP = 0, DOWN = 1, LEFT = 2, RIGHT = 3, ENEMY_LOCATION = [192, 0, 384], BULLET_TYPE_PLAYER = 1, BULLET_TYPE_ENEMY = 2, CRACK_TYPE_TANK = "tank", CRACK_TYPE_BULLET = "bullet"; var CrackAnimation = function (t, s, i) { this.ctx = s, this.owner = i, this.times = 0, this.frame = 0, this.x = 0, this.y = 0, this.posName = "", this.size = 0, this.isOver = !1, this.tempDir = 1, t == CRACK_TYPE_TANK ? (this.posName = "tankBomb", this.size = 66, this.frame = 4) : (this.posName = "bulletBomb", this.size = 32, this.frame = 3), this.x = i.x + parseInt(i.size - this.size) / 2, this.y = i.y + parseInt(i.size - this.size) / 2, this.draw = function () { var t = parseInt(this.times / 3); t = parseInt(this.times / 3); this.ctx.drawImage(RESOURCE_IMAGE, POS[this.posName][0] + t * this.size, POS[this.posName][1], this.size, this.size, this.x * MAGNIFICATION, this.y * MAGNIFICATION, this.size * MAGNIFICATION, this.size * MAGNIFICATION), this.times += this.tempDir, this.times > 3 * this.frame - parseInt(1.5) && (this.tempDir = -1), this.times <= 0 && (this.isOver = !0) } }; class GameMap extends AcGameObject { constructor(t) { super(), this.playground = t, this.$canvasDiv = $('<div id="canvasDiv" class="canvasDiv"></div>'), this.$wallCanvas = $('<canvas id="wallCanvas"></canvas>'), this.$tankCanvas = $('<canvas id="tankCanvas"></canvas>'), this.$grassCanvas = $('<canvas id="grassCanvas"></canvas>'), this.$overCanvas = $('<canvas id="overCanvas"></canvas>'), this.$stageCanvas = $('<canvas id="stageCanvas"></canvas>'), this.initScreen(), this.playground.$playground.append(this.$canvasDiv), this.ctx, this.wallCtx, this.grassCtx, this.tankCtx, this.overCtx, this.menu = null, this.stage = null, this.map = null, this.player1 = null, this.player2 = null, this.prop = null, this.enemyArray = [], this.bulletArray = [], this.keys = [], this.crackArray = [], this.gameState = GAME_STATE_MENU, this.level = 1, this.maxEnemy = 20, this.maxAppearEnemy = 5, this.appearEnemy = 0, this.mainframe = 0, this.propTime = 300 } initScreen() { this.$canvasDiv.css({ width: SCREEN_WIDTH }), this.$canvasDiv.css({ height: SCREEN_HEIGHT }), this.$canvasDiv.css({ "background-color": "#000000" }), this.$canvasDiv.css({ margin: "auto" }), this.ctx = this.$stageCanvas[0].getContext("2d"), this.$stageCanvas.attr({ width: SCREEN_WIDTH }), this.$stageCanvas.attr({ height: SCREEN_HEIGHT }), this.wallCtx = this.$wallCanvas[0].getContext("2d"), this.$wallCanvas.attr({ width: SCREEN_WIDTH }), this.$wallCanvas.attr({ height: SCREEN_HEIGHT }), this.grassCtx = this.$grassCanvas[0].getContext("2d"), this.$grassCanvas.attr({ width: SCREEN_WIDTH }), this.$grassCanvas.attr({ height: SCREEN_HEIGHT }), this.tankCtx = this.$tankCanvas[0].getContext("2d"), this.$tankCanvas.attr({ width: SCREEN_WIDTH }), this.$tankCanvas.attr({ height: SCREEN_HEIGHT }), this.overCtx = this.$overCanvas[0].getContext("2d"), this.$overCanvas.attr({ width: SCREEN_WIDTH }), this.$overCanvas.attr({ height: SCREEN_HEIGHT }), this.$canvasDiv.append(this.$wallCanvas), this.$canvasDiv.append(this.$tankCanvas), this.$canvasDiv.append(this.$grassCanvas), this.$canvasDiv.append(this.$overCanvas), this.$canvasDiv.append(this.$stageCanvas) } start() { this.menu = new Menu(this.ctx), this.map = new TankMap(this.wallCtx, this.grassCtx, this.maxEnemy), this.stage = new Stage(this.ctx, this.level, this), this.appearEnemy = 0, this.enemyArray = [], this.keys = [], this.crackArray = [], this.player1 = new PlayTank(this, this.tankCtx, this.map), this.player1.x = 129 + this.map.offsetX, this.player1.y = 385 + this.map.offsetY, this.player2 = new PlayTank(this, this.tankCtx, this.map), this.player2.offsetX = 128, this.player2.x = 256 + this.map.offsetX, this.player2.y = 385 + this.map.offsetY, this.isGameOver = !1, this.overX = 176, this.overY = 384, this.overCtx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT), this.enemyStopTime = 0, this.homeProtectedTime = -1, this.propTime = 1e3, this.keyboard = new Keyboard, this.add_listening_events() } add_listening_events() { let t = this; $(document).keydown((function (s) { switch (t.gameState) { case GAME_STATE_MENU: if (s.keyCode == t.keyboard.ENTER) t.gameState = GAME_STATE_INIT, 1 == t.menu.playNum && (t.player2.lives = 0); else { let i = 0; s.keyCode == t.keyboard.DOWN ? i = 1 : s.keyCode == t.keyboard.UP && (i = -1), t.menu.next(i) } break; case GAME_STATE_START: t.keys.includes(s.keyCode) || t.keys.push(s.keyCode), s.keyCode == t.keyboard.SPACE && t.player1.lives > 0 ? t.player1.shoot(BULLET_TYPE_PLAYER) : s.keyCode == t.keyboard.ENTER && t.player2.lives > 0 ? t.player2.shoot(BULLET_TYPE_ENEMY) : s.keyCode == t.keyboard.N ? t.nextLevel() : s.keyCode == t.keyboard.P && t.preLevel() } })), $(document).keyup((function (s) { for (let i = 0; i < t.keys.length; i++)t.keys[i] === s.keyCode && t.keys.splice(i, 1) })) } resize() { this.ctx.canvas.width = this.playground.width, this.ctx.canvas.height = this.playground.height, this.resize_all_canvas() } resize_all_canvas() { this.$canvasDiv.css({ width: SCREEN_WIDTH }), this.$canvasDiv.css({ height: SCREEN_HEIGHT }), this.$stageCanvas.attr({ width: SCREEN_WIDTH }), this.$stageCanvas.attr({ height: SCREEN_HEIGHT }), this.$wallCanvas.attr({ width: SCREEN_WIDTH }), this.$wallCanvas.attr({ height: SCREEN_HEIGHT }), this.$grassCanvas.attr({ width: SCREEN_WIDTH }), this.$grassCanvas.attr({ height: SCREEN_HEIGHT }), this.$tankCanvas.attr({ width: SCREEN_WIDTH }), this.$tankCanvas.attr({ height: SCREEN_HEIGHT }), this.$overCanvas.attr({ width: SCREEN_WIDTH }), this.$overCanvas.attr({ height: SCREEN_HEIGHT }) } update() { this.render() } render() { switch (this.gameState) { case GAME_STATE_MENU: this.menu.draw(); break; case GAME_STATE_INIT: this.stage.draw(), 1 == this.stage.isReady && (this.gameState = GAME_STATE_START); break; case GAME_STATE_START: this.drawAll(), (this.isGameOver || this.player1.lives <= 0 && this.player2.lives <= 0) && (this.gameState = GAME_STATE_OVER, this.map.homeHit(), PLAYER_DESTROY_AUDIO.play()), this.appearEnemy == this.maxEnemy && 0 == this.enemyArray.length && (this.gameState = GAME_STATE_WIN); break; case GAME_STATE_WIN: this.nextLevel(); break; case GAME_STATE_OVER: this.gameOver() } } initMap() { this.map.setMapLevel(this.level), this.map.draw(), this.drawLives() } drawLives() { this.map.drawLives(this.player1.lives, 1), this.map.drawLives(this.player2.lives, 2) } drawBullet() { if (null != this.bulletArray && this.bulletArray.length > 0) for (let t = 0; t < this.bulletArray.length; t++) { this.bulletArray[t].draw() } } keyEvent() { this.keys.includes(this.keyboard.W) ? (this.player1.dir = UP, this.player1.hit = !1, this.player1.move()) : this.keys.includes(this.keyboard.S) ? (this.player1.dir = DOWN, this.player1.hit = !1, this.player1.move()) : this.keys.includes(this.keyboard.A) ? (this.player1.dir = LEFT, this.player1.hit = !1, this.player1.move()) : this.keys.includes(this.keyboard.D) && (this.player1.dir = RIGHT, this.player1.hit = !1, this.player1.move()), this.keys.includes(this.keyboard.UP) ? (this.player2.dir = UP, this.player2.hit = !1, this.player2.move()) : this.keys.includes(this.keyboard.DOWN) ? (this.player2.dir = DOWN, this.player2.hit = !1, this.player2.move()) : this.keys.includes(this.keyboard.LEFT) ? (this.player2.dir = LEFT, this.player2.hit = !1, this.player2.move()) : this.keys.includes(this.keyboard.RIGHT) && (this.player2.dir = RIGHT, this.player2.hit = !1, this.player2.move()) } addEnemyTank() { if (null == this.enemyArray || this.enemyArray.length >= this.maxAppearEnemy || 0 == this.maxEnemy) return; this.appearEnemy++; let t = parseInt(3 * Math.random()) + 1, s = null; (1 == t || 2 == t || 3 == t) && (s = new EnemyTank(this, this.tankCtx, this.map, t)), s.x = ENEMY_LOCATION[parseInt(3 * Math.random())] + this.map.offsetX, s.y = this.map.offsetY, s.dir = DOWN, this.enemyArray.push(s), this.map.clearEnemyNum(this.maxEnemy, this.appearEnemy) } drawEnemyTanks() { if (null != this.enemyArray || this.enemyArray.length > 0) for (let t = 0; t < this.enemyArray.length; t++) { let s = this.enemyArray[t]; s.isDestroyed ? (this.enemyArray.splice(t, 1), t--) : s.draw() } this.enemyStopTime > 0 && this.enemyStopTime-- } drawAll() { this.tankCtx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT), this.player1.lives > 0 && this.player1.draw(), this.player2.lives > 0 && this.player2.draw(), this.drawLives(), this.appearEnemy < this.maxEnemy && (this.mainframe % 100 == 0 && (this.addEnemyTank(), this.mainframe = 0), this.mainframe++), this.drawEnemyTanks(), this.drawBullet(), this.drawCrack(), this.keyEvent(), this.propTime <= 0 ? this.drawProp() : this.propTime--, this.homeProtectedTime > 0 ? this.homeProtectedTime-- : 0 == this.homeProtectedTime && (this.homeProtectedTime = -1, this.homeNoProtected()) } drawCrack() { if (null != this.crackArray && this.crackArray.length > 0) for (let t = 0; t < this.crackArray.length; t++) { let s = this.crackArray[t]; s.isOver ? (this.crackArray.splice(t, 1), t--, s.owner == this.player1 ? this.player1.renascenc(1) : s.owner == this.player2 && this.player2.renascenc(2)) : s.draw() } } gameOver() { for (; this.bulletArray.length > 0;)this.bulletArray.pop(); this.overCtx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT), this.overCtx.drawImage(RESOURCE_IMAGE, POS.over[0], POS.over[1], 64, 32, this.overX * MAGNIFICATION + this.map.offsetX, this.overY * MAGNIFICATION + this.map.offsetY, 64 * MAGNIFICATION, 32 * MAGNIFICATION), this.overY -= 2, this.overY <= parseInt(this.map.mapHeight / 2) && (this.start(), 1 == this.menu.playNum && (this.player2.lives = 0), this.gameState = GAME_STATE_MENU) } nextLevel() { this.level++, 21 == this.level && (this.level = 1), this.start(), 1 == this.menu.playNum && (this.player2.lives = 0), this.stage.init(this.level), this.gameState = GAME_STATE_INIT } preLevel() { this.level--, 0 == this.level && (this.level = 20), this.start(), 1 == this.menu.playNum && (this.player2.lives = 0), this.stage.init(this.level), this.gameState = GAME_STATE_INIT } drawProp() { Math.random() < .4 && null == this.prop && (this.prop = new Prop(this, this.overCtx, this.map, this.player1, this.player2), this.prop.init()), null != this.prop && (this.prop.draw(), this.prop.isDestroyed && (this.prop = null, this.propTime = 1e3)) } homeNoProtected() { this.map.updateMap([[23, 11], [23, 12], [23, 13], [23, 14], [24, 11], [24, 14], [25, 11], [25, 14]], WALL) } on_destroy() { for (this.gameState = GAME_STATE_OVER; this.enemyArray && this.enemyArray.length > 0;)this.enemyArray[0].destroy(), this.enemyArray.splice(0, 1); for (; this.bulletArray && this.bulletArray.length > 0;)this.bulletArray[0].destroy(), this.bulletArray.splice(0, 1); this.keys && this.keys.length > 0 && (this.keys = []), this.crackArray && this.crackArray.length > 0 && (this.crackArray = []), this.player1 && (this.player1.destroy(), this.player1 = null), this.player2 && (this.player2.destroy(), this.player2 = null), this.menu.destroy(), this.menu = null, this.map.destroy(), this.map = null, this.stage.destroy(), this.stage = null, this.$canvasDiv.empty(), this.$canvasDiv.hide() } hide() { this.$canvasDiv.hide() } } class Keyboard { constructor() { this.UP = 38, this.DOWN = 40, this.RIGHT = 39, this.LEFT = 37, this.SPACE = 32, this.TAB = 9, this.ENTER = 13, this.CTRL = 17, this.ALT = 18, this.Num0 = 48, this.Num1 = 49, this.Num2 = 50, this.Num3 = 51, this.Num4 = 52, this.Num5 = 53, this.Num6 = 54, this.Num7 = 55, this.Num8 = 56, this.Num9 = 57, this.A = 65, this.B = 66, this.C = 67, this.D = 68, this.E = 69, this.F = 70, this.G = 71, this.H = 72, this.I = 73, this.J = 74, this.K = 75, this.L = 76, this.M = 77, this.N = 78, this.O = 79, this.P = 80, this.Q = 81, this.R = 82, this.S = 83, this.T = 84, this.U = 85, this.V = 86, this.W = 87, this.X = 88, this.Y = 89, this.Z = 90 } } var map1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], map2 = [[0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 3, 3, 1, 1, 2, 2], [3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 3, 3, 1, 1, 2, 2], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0]], map3 = [[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 0, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0], [1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]], map4 = [[0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3], [3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3], [3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2], [3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [4, 4, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [4, 4, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 4, 4, 4, 4], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 4, 4, 4, 4], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3], [3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3], [3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3], [2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 2], [2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 0]], map5 = [[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 4, 4, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 4, 4, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], [4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], map6 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 1, 3, 3], [0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 1, 3, 3], [0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 3, 3, 1, 0, 0, 1, 3, 3], [0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 3, 3, 1, 0, 0, 1, 3, 3], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 3, 3, 0, 0, 1, 1, 3, 3], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 3, 3, 0, 0, 1, 1, 3, 3], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 2, 0, 0, 0, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 0, 1, 1, 1, 1, 1, 2, 2], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3]], map7 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0, 3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], map8 = [[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4], [3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 2, 2, 2, 1, 1], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4], [3, 3, 3, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [3, 3, 3, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0], [3, 3, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]], map9 = [[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 3, 3, 2, 2], [2, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 3, 3, 2, 2], [0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]], map10 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 2, 2, 2, 2, 3, 3, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 2, 2, 2, 2, 3, 3, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1], [1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]], map11 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3, 0, 0, 2, 2], [0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0], [2, 2, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0], [2, 2, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0], [0, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 4, 4, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 4, 4, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 3, 3, 3, 3, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], map12 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 1, 0, 0, 2, 2, 2, 0, 1, 1, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 1, 1, 0, 0, 2, 2, 2, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 1, 1, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], map13 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 3, 3, 0, 0, 2, 2, 0, 0, 3, 3, 0, 1, 0, 0, 2, 2, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 0, 1, 0, 0, 2, 2, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 2, 2, 0, 0, 1, 0, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 0, 1, 0, 0, 1, 1, 0, 0], [1, 1, 2, 2, 0, 0, 1, 0, 3, 3, 0, 0, 2, 2, 0, 0, 3, 3, 0, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0], [1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], map14 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3], [3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3], [3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3], [3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3], [3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3], [3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3], [3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3], [4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 4, 4, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2], [2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2]], map15 = [[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [3, 3, 2, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2], [3, 3, 0, 0, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2], [3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 1, 1, 2, 0, 1, 1, 0, 0], [3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 3, 3, 3, 3, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 3, 3, 3, 3, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3], [0, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 1, 0, 3, 3], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 3, 3, 3, 3, 1, 1, 1, 0, 3, 3], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 3, 3], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 3, 3], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 3, 3], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 3, 3], [0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 1, 1, 3, 3, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 1, 1, 1, 1, 0, 1, 1, 3, 3, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0]], map16 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 2, 2], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 2, 2], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3], [2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 9, 8, 1, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3], [2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 8, 8, 1, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3]], map17 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0], [3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0], [3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2], [2, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2], [2, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [0, 0, 2, 2, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0], [0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], map18 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0], [1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0], [1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0], [0, 0, 1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 1, 1, 2, 2, 2, 2, 0, 0], [0, 0, 1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 1, 1, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 2, 2, 1, 1, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 2, 2, 1, 1, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0], [2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0], [3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], [3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2]], map19 = [[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3], [3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 3, 3, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], map20 = [[0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [2, 2, 0, 0, 1, 1, 4, 4, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 4, 4, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 4, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 4, 4, 0, 0, 3, 3, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 4, 4, 0, 0, 3, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3], [0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 3, 3, 3, 3, 3], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 4, 4, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 1, 0, 0, 0, 4, 4, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 4, 4, 0, 0, 3, 3, 0, 0]]; class Num extends AcGameObject { constructor(t) { super(), this.ctx = t, this.size = 14 } draw(t, s, i) { let e = s, a = i, h = []; if (0 == t) h.push(0); else for (; t > 0;)h.push(t % 10), t = parseInt(t / 10); for (let t = h.length - 1; t >= 0; t--)e = s + (h.length - t - 1) * this.size * MAGNIFICATION, this.ctx.drawImage(RESOURCE_IMAGE, POS.num[0] + 14 * h[t], POS.num[1], this.size, this.size, e, a, this.size * MAGNIFICATION, this.size * MAGNIFICATION) } } class Prop { constructor(t, s, i, e, a) { this.game_map = t, this.enemyArray = this.game_map.enemyArray, this.ctx = s, this.map = i, this.player1 = e, this.player2 = a, this.x = 0, this.y = 0, this.duration = 600, this.type = 0, this.hit = !1, this.width = 30, this.height = 28, this.isDestroyed = !1, this.size = 28 } init() { this.ctx.clearRect(this.x, this.y, this.width, this.height), this.duration = 600, this.type = parseInt(6 * Math.random()), this.x = parseInt(384 * Math.random()) + this.map.offsetX, this.y = parseInt(384 * Math.random()) + this.map.offsetY, this.isDestroyed = !1 } draw() { this.duration > 0 && !this.isDestroyed ? (this.ctx.drawImage(RESOURCE_IMAGE, POS.prop[0] + this.type * this.width, POS.prop[1], this.width, this.height, this.x * MAGNIFICATION, this.y * MAGNIFICATION, this.width * MAGNIFICATION, this.height * MAGNIFICATION), this.duration--, this.isHit()) : (this.ctx.clearRect(this.x * MAGNIFICATION, this.y * MAGNIFICATION, this.width * MAGNIFICATION, this.height * MAGNIFICATION), this.isDestroyed = !0) } isHit() { let t = null; if (this.player1.lives > 0 && CheckIntersect(this, this.player1, 0) ? (this.hit = !0, t = this.player1) : this.player2.lives > 0 && CheckIntersect(this, this.player2, 0) && (this.hit = !0, t = this.player2), this.hit) switch (PROP_AUDIO.play(), this.isDestroyed = !0, this.ctx.clearRect(this.x * MAGNIFICATION, this.y * MAGNIFICATION, this.width * MAGNIFICATION, this.height * MAGNIFICATION), this.type) { case 0: t.lives++; break; case 1: this.game_map.enemyStopTime = 500; break; case 2: let s = [[23, 11], [23, 12], [23, 13], [23, 14], [24, 11], [24, 14], [25, 11], [25, 14]]; this.map.updateMap(s, GRID), this.game_map.homeProtectedTime = 500; break; case 3: if (null != this.enemyArray || this.enemyArray.length > 0) for (let t = 0; t < this.enemyArray.length; t++) { this.enemyArray[t].play_destroy_audio() } break; case 4: break; case 5: t.isProtected = !0, t.protectedTime = 500 } } } class Stage extends AcGameObject { constructor(t, s, i) { super(), this.ctx = t, this.level = s, this.gameMap = i, this.ctx.fillStyle = "#7f7f7f", this.drawHeigth = 15, this.temp = 0, this.dir = 1, this.isReady = !1, this.levelNum = new Num(t) } init(t) { this.dir = 1, this.isReady = !1, this.level = t, this.temp = 0 } draw() { 1 == this.dir ? 225 == this.temp ? (this.ctx.drawImage(RESOURCE_IMAGE, POS.stageLevel[0], POS.stageLevel[1], 78, 14, 194 * MAGNIFICATION, 208 * MAGNIFICATION, 78 * MAGNIFICATION, 14 * MAGNIFICATION), this.levelNum.draw(this.level, 308 * MAGNIFICATION, 208 * MAGNIFICATION), this.gameMap.initMap()) : 825 == this.temp ? (this.temp = 225, this.dir = -1, START_AUDIO.play()) : (this.ctx.fillRect(0 * MAGNIFICATION, this.temp * MAGNIFICATION, 512 * MAGNIFICATION, this.drawHeigth * MAGNIFICATION), this.ctx.fillRect(0 * MAGNIFICATION, (448 - this.temp - this.drawHeigth) * MAGNIFICATION, 512 * MAGNIFICATION, this.drawHeigth * MAGNIFICATION)) : this.temp >= 0 ? (this.ctx.clearRect(0 * MAGNIFICATION, this.temp * MAGNIFICATION, 512 * MAGNIFICATION, this.drawHeigth * MAGNIFICATION), this.ctx.clearRect(0 * MAGNIFICATION, (448 - this.temp - this.drawHeigth) * MAGNIFICATION, 512 * MAGNIFICATION, this.drawHeigth * MAGNIFICATION)) : this.isReady = !0, this.temp += this.drawHeigth * this.dir } on_destroy() { this.levelNum.destroy(), this.levelNum = null } } class Tank extends AcGameObject { constructor() { super(), this.x = 0, this.y = 0, this.size = 32, this.dir = UP, this.speed = 1, this.frame = 0, this.hit = !1, this.isAI = !1, this.isShooting = !1, this.bullet = null, this.shootRate = .6, this.isDestroyed = !1, this.tempX = 0, this.tempY = 0, this.enemyStopTime = 0 } move() { this.isAI && this.enemyStopTime > 0 || (this.tempX = this.x, this.tempY = this.y, this.isAI && (this.frame++, (this.frame % 100 == 0 || this.hit) && (this.dir = parseInt(4 * Math.random()), this.hit = !1, this.frame = 0)), this.dir == UP ? this.tempY -= this.speed : this.dir == DOWN ? this.tempY += this.speed : this.dir == RIGHT ? this.tempX += this.speed : this.dir == LEFT && (this.tempX -= this.speed), this.isHit(), this.hit || (this.x = this.tempX, this.y = this.tempY)) } isHit() { this.dir == LEFT ? this.x <= this.map.offsetX && (this.x = this.map.offsetX, this.hit = !0) : this.dir == RIGHT ? this.x >= this.map.offsetX + this.map.mapWidth - this.size && (this.x = this.map.offsetX + this.map.mapWidth - this.size, this.hit = !0) : this.dir == UP ? this.y <= this.map.offsetY && (this.y = this.map.offsetY, this.hit = !0) : this.dir == DOWN && this.y >= this.map.offsetY + this.map.mapHeight - this.size && (this.y = this.map.offsetY + this.map.mapHeight - this.size, this.hit = !0), this.hit || this.tankMapCollision(this, this.map) && (this.hit = !0) } isShot() { } shoot(t) { if (!(this.isAI && this.enemyStopTime > 0 || this.isShooting)) { let s = this.x, i = this.y; this.bullet = new Bullet(this.game_map, this.ctx, this, t, this.dir, this.map, this.bulletArray, this.isAI), this.bulletArray.push(this.bullet), this.isShooting = !0, this.dir == UP ? (s = this.x + parseInt(this.size / 2) - parseInt(this.bullet.size / 2), i = this.y - this.bullet.size) : this.dir == DOWN ? (s = this.x + parseInt(this.size / 2) - parseInt(this.bullet.size / 2), i = this.y + this.size) : this.dir == LEFT ? (s = this.x - this.bullet.size, i = this.y + parseInt(this.size / 2) - parseInt(this.bullet.size / 2)) : this.dir == RIGHT && (s = this.x + this.size, i = this.y + parseInt(this.size / 2) - parseInt(this.bullet.size / 2)), this.bullet.x = s, this.bullet.y = i, this.isAI || ATTACK_AUDIO.play(), this.bullet.draw() } } on_destroy() { this.play_destroy_audio() } play_destroy_audio() { this.isDestroyed = !0, this.crackArray && this.crackArray.push(new CrackAnimation(CRACK_TYPE_TANK, this.ctx, this)), TANK_DESTROY_AUDIO.play() } tankMapCollision(t, s) { let i = 0, e = 0, a = 0; if (t.dir == UP ? (e = parseInt((t.tempY + 3 - s.offsetY) / s.tileSize), a = parseInt((t.tempX + 3 - s.offsetX) / s.tileSize)) : t.dir == DOWN ? (e = parseInt((t.tempY - 3 - s.offsetY + t.size) / s.tileSize), a = parseInt((t.tempX + 3 - s.offsetX) / s.tileSize)) : t.dir == LEFT ? (e = parseInt((t.tempY + 3 - s.offsetY) / s.tileSize), a = parseInt((t.tempX + 3 - s.offsetX) / s.tileSize)) : t.dir == RIGHT && (e = parseInt((t.tempY + 3 - s.offsetY) / s.tileSize), a = parseInt((t.tempX - 3 - s.offsetX + t.size) / s.tileSize)), e >= s.HTileCount || e < 0 || a >= s.wTileCount || a < 0) return !0; if (t.dir == UP || t.dir == DOWN) { let h = parseInt(t.tempX - s.offsetX - a * s.tileSize + t.size - 3); i = h % s.tileSize == 0 ? parseInt(h / s.tileSize) : parseInt(h / s.tileSize) + 1; for (let h = 0; h < i && a + h < s.wTileCount; h++) { let i = s.mapLevel[e][a + h]; if (i == WALL || i == GRID || i == WATER || i == HOME || i == ANOTHREHOME) return t.dir == UP ? t.y = s.offsetY + e * s.tileSize + s.tileSize - 3 : t.dir == DOWN && (t.y = s.offsetY + e * s.tileSize - t.size + 3), !0 } } else { let h = parseInt(t.tempY - s.offsetY - e * s.tileSize + t.size - 3); i = h % s.tileSize == 0 ? parseInt(h / s.tileSize) : parseInt(h / s.tileSize) + 1; for (let h = 0; h < i && e + h < s.HTileCount; h++) { let i = s.mapLevel[e + h][a]; if (i == WALL || i == GRID || i == WATER || i == HOME || i == ANOTHREHOME) return t.dir == LEFT ? t.x = s.offsetX + a * s.tileSize + s.tileSize - 3 : t.dir == RIGHT && (t.x = s.offsetX + a * s.tileSize - t.size + 3), !0 } } return !1 } } class EnemyTank extends Tank { constructor(t, s, i, e) { super(), this.game_map = t, this.enemyStopTime = this.game_map.enemyStopTime, this.bulletArray = this.game_map.bulletArray, this.crackArray = this.game_map.crackArray, this.rand = e, this.tank_rand = "enemy" + this.rand.toString(), this.ctx = s, this.map = i, this.isAppear = !1, this.times = 0, this.isAI = !0, this.set_up() } set_up() { 1 === this.rand || 2 === this.rand ? this.lives = 1 : this.lives = 3, 1 === this.rand ? this.speed = 1 : 2 === this.rand ? this.speed = 1.7 : 3 === this.rand && (this.speed = .6) } draw() { if (this.updateStopTime(), this.times++, this.isAppear) { if (3 === this.rand ? this.ctx.drawImage(RESOURCE_IMAGE, POS[this.tank_rand][0] + this.dir * this.size + (3 - this.lives) * this.size * 4, POS[this.tank_rand][1], 32, 32, this.x * MAGNIFICATION, this.y * MAGNIFICATION, 32 * MAGNIFICATION, 32 * MAGNIFICATION) : this.ctx.drawImage(RESOURCE_IMAGE, POS[this.tank_rand][0] + this.dir * this.size, POS[this.tank_rand][1], 32, 32, this.x * MAGNIFICATION, this.y * MAGNIFICATION, 32 * MAGNIFICATION, 32 * MAGNIFICATION), this.times % 50 == 0) Math.random() < this.shootRate && this.shoot(2), this.times = 0; this.move() } else { var t = parseInt(this.times / 5) % 7; this.ctx.drawImage(RESOURCE_IMAGE, POS.enemyBefore[0] + 32 * t, POS.enemyBefore[1], 32, 32, this.x * MAGNIFICATION, this.y * MAGNIFICATION, 32 * MAGNIFICATION, 32 * MAGNIFICATION), 34 == this.times && (this.isAppear = !0, this.times = 0, this.shoot(2)) } } updateStopTime() { this.enemyStopTime = this.game_map.enemyStopTime } } class PlayTank extends Tank { constructor(t, s, i) { super(), this.game_map = t, this.bulletArray = this.game_map.bulletArray, this.crackArray = this.game_map.crackArray, this.ctx = s, this.map = i, this.lives = 3, this.isProtected = !0, this.protectedTime = 500, this.offsetX = 0, this.isAI = !1, this.speed = 2 } draw() { if (this.hit = !1, this.ctx.drawImage(RESOURCE_IMAGE, POS.player[0] + this.offsetX + this.dir * this.size, POS.player[1], this.size, this.size, this.x * MAGNIFICATION, this.y * MAGNIFICATION, this.size * MAGNIFICATION, this.size * MAGNIFICATION), this.isProtected) { let t = parseInt((500 - this.protectedTime) / 5) % 2; this.ctx.drawImage(RESOURCE_IMAGE, POS.protected[0], POS.protected[1] + 32 * t, 32, 32, this.x * MAGNIFICATION, this.y * MAGNIFICATION, 32 * MAGNIFICATION, 32 * MAGNIFICATION), this.protectedTime--, 0 == this.protectedTime && (this.isProtected = !1) } } renascenc(t) { this.lives--, this.dir = UP, this.isProtected = !0, this.protectedTime = 500, this.isDestroyed = !1; let s = 0; s = 1 == t ? 129 : 256, this.x = s + this.map.offsetX, this.y = 385 + this.map.offsetY } } class SelectTank extends Tank { constructor() { super(), this.start() } start() { this.resize() } resize() { this.ys = [250 * MAGNIFICATION, 281 * MAGNIFICATION], this.x = 140 * MAGNIFICATION, this.size = 27 } } class TankMap extends AcGameObject { constructor(t, s, i) { super(), this.level = 1, this.mapLevel = null, this.wallCtx = t, this.grassCtx = s, this.maxEnemy = i, this.offsetX = 32, this.offsetY = 16, this.wTileCount = 26, this.HTileCount = 26, this.tileSize = 16, this.homeSize = 32, this.num = new Num(this.wallCtx), this.mapWidth = 416 * MAGNIFICATION, this.mapHeight = 416 * MAGNIFICATION } setMapLevel(level) { this.level = level; let tempMap = eval("map" + this.level); this.mapLevel = new Array; for (let t = 0; t < tempMap.length; t++) { this.mapLevel[t] = new Array; for (let s = 0; s < tempMap[t].length; s++)this.mapLevel[t][s] = tempMap[t][s] } } draw() { this.wallCtx.fillStyle = "#7f7f7f", this.wallCtx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT), this.wallCtx.fillStyle = "#000", this.wallCtx.fillRect(this.offsetX * MAGNIFICATION, this.offsetY * MAGNIFICATION, this.mapWidth, this.mapHeight), this.grassCtx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT); for (let t = 0; t < this.HTileCount; t++)for (let s = 0; s < this.wTileCount; s++)this.mapLevel[t][s] == WALL || this.mapLevel[t][s] == GRID || this.mapLevel[t][s] == WATER || this.mapLevel[t][s] == ICE ? this.wallCtx.drawImage(RESOURCE_IMAGE, this.tileSize * (this.mapLevel[t][s] - 1) + POS.map[0], POS.map[1], this.tileSize, this.tileSize, s * this.tileSize * MAGNIFICATION + this.offsetX * MAGNIFICATION, t * this.tileSize * MAGNIFICATION + this.offsetY * MAGNIFICATION, this.tileSize * MAGNIFICATION, this.tileSize * MAGNIFICATION) : this.mapLevel[t][s] == GRASS ? this.grassCtx.drawImage(RESOURCE_IMAGE, this.tileSize * (this.mapLevel[t][s] - 1) + POS.map[0], POS.map[1], this.tileSize, this.tileSize, s * this.tileSize * MAGNIFICATION + this.offsetX * MAGNIFICATION, t * this.tileSize * MAGNIFICATION + this.offsetY * MAGNIFICATION, this.tileSize * MAGNIFICATION, this.tileSize * MAGNIFICATION) : this.mapLevel[t][s] == HOME && this.wallCtx.drawImage(RESOURCE_IMAGE, POS.home[0], POS.home[1], this.homeSize, this.homeSize, s * this.tileSize * MAGNIFICATION + this.offsetX * MAGNIFICATION, t * this.tileSize * MAGNIFICATION + this.offsetY * MAGNIFICATION, this.homeSize * MAGNIFICATION, this.homeSize * MAGNIFICATION); this.drawNoChange(), this.drawEnemyNum(this.maxEnemy), this.drawLevel(), this.drawLives(0, 1), this.drawLives(0, 2) } drawNoChange() { this.wallCtx.drawImage(RESOURCE_IMAGE, POS.score[0], POS.score[1], 30, 32, 464 * MAGNIFICATION, 256 * MAGNIFICATION, 30 * MAGNIFICATION, 32 * MAGNIFICATION), this.wallCtx.drawImage(RESOURCE_IMAGE, 30 + POS.score[0], POS.score[1], 30, 32, 464 * MAGNIFICATION, 304 * MAGNIFICATION, 30 * MAGNIFICATION, 32 * MAGNIFICATION), this.wallCtx.drawImage(RESOURCE_IMAGE, 60 + POS.score[0], POS.score[1], 30, 32, 464 * MAGNIFICATION, 352 * MAGNIFICATION, 32 * MAGNIFICATION, 30 * MAGNIFICATION) } drawLevel() { this.num.draw(this.level, 468 * MAGNIFICATION, 384 * MAGNIFICATION) } drawEnemyNum(t) { for (let s = 1; s <= t; s++) { let t = 466, i = 34 + 16 * parseInt((s + 1) / 2); s % 2 == 0 && (t = 482), this.wallCtx.drawImage(RESOURCE_IMAGE, 92 + POS.score[0], POS.score[1], 14, 14, t * MAGNIFICATION, i * MAGNIFICATION, 14 * MAGNIFICATION, 14 * MAGNIFICATION) } } clearEnemyNum(t, s) { let i = 34 + this.offsetY * MAGNIFICATION; if (s <= 0) return; this.wallCtx.fillStyle = "#7f7f7f"; let e = 466 + s % 2 * 16, a = i + 16 * (Math.ceil(t / 2) - 1) - 16 * parseInt((s - 1) / 2); this.wallCtx.fillRect(e * MAGNIFICATION, a * MAGNIFICATION, 14 * MAGNIFICATION, 14 * MAGNIFICATION) } drawLives(t, s) { let i = 272; 2 == s && (i = 320), this.wallCtx.fillStyle = "#7f7f7f", this.wallCtx.fillRect(482 * MAGNIFICATION, i * MAGNIFICATION, this.num.size * MAGNIFICATION, this.num.size * MAGNIFICATION), this.num.draw(t, 482 * MAGNIFICATION, i * MAGNIFICATION) } updateMap(t, s) { if (null != t && t.length > 0) { let i = t.length; for (let e = 0; e < i; e++) { let i = t[e]; this.mapLevel[i[0]][i[1]] = s, s > 0 ? this.wallCtx.drawImage(RESOURCE_IMAGE, this.tileSize * (s - 1) + POS.map[0], POS.map[1], this.tileSize, this.tileSize, i[1] * this.tileSize * MAGNIFICATION + this.offsetX * MAGNIFICATION, i[0] * this.tileSize * MAGNIFICATION + this.offsetY * MAGNIFICATION, this.tileSize * MAGNIFICATION, this.tileSize * MAGNIFICATION) : (this.wallCtx.fillStyle = "#000", this.wallCtx.fillRect(i[1] * this.tileSize * MAGNIFICATION + this.offsetX * MAGNIFICATION, i[0] * this.tileSize * MAGNIFICATION + this.offsetY * MAGNIFICATION, this.tileSize * MAGNIFICATION, this.tileSize * MAGNIFICATION)) } } } homeHit() { this.wallCtx.drawImage(RESOURCE_IMAGE, POS.home[0] + this.homeSize, POS.home[1], this.homeSize, this.homeSize, 12 * this.tileSize * MAGNIFICATION + this.offsetX * MAGNIFICATION, 24 * this.tileSize * MAGNIFICATION + this.offsetY * MAGNIFICATION, this.homeSize * MAGNIFICATION, this.homeSize * MAGNIFICATION) } on_destroy() { this.num.destroy(), this.num = null } } class Menu extends AcGameObject { constructor(t) { super(), this.ctx = t, this.x = 0, this.y = SCREEN_HEIGHT, this.selectTank = new SelectTank, this.playNum = 1, this.times = 0, this.draw() } draw() { this.times++; var t = 0; t = parseInt(this.times / 6) % 2 == 0 ? 0 : this.selectTank.size, this.y <= 0 ? this.y = 0 : this.y -= 5, this.ctx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT), this.ctx.save(), this.ctx.drawImage(MENU_IMAGE, this.x, this.y, SCREEN_WIDTH, SCREEN_HEIGHT), this.selectTank.resize(), this.ctx.drawImage(RESOURCE_IMAGE, POS.selectTank[0], POS.selectTank[1] + t, this.selectTank.size, this.selectTank.size, this.selectTank.x, this.y + this.selectTank.ys[this.playNum - 1], this.selectTank.size * MAGNIFICATION, this.selectTank.size * MAGNIFICATION), this.ctx.restore() } next(t) { this.playNum += t, this.playNum > 2 ? this.playNum = 1 : this.playNum < 1 && (this.playNum = 2) } on_destroy() { this.selectTank.destroy(), this.selectTank = null } } class AcGamePlayground { constructor(t) { this.root = t, this.$playground = $('<div class="ac-game-playground"></div>'), this.operator = "pc", this.hide(), this.root.$ac_game.append(this.$playground), this.start() } create_uuid() { let t = ""; for (let s = 0; s < 8; s++) { t += parseInt(Math.floor(10 * Math.random())) } return t } start() { let t = this, s = this.create_uuid(); $(window).on(`resize.${s}`, (function () { t.resize() })), this.root.AcWingOS && this.root.AcWingOS.api.window.on_close((function () { $(window).off(`resize.${s}`), t.hide() })), this.check_operator() } check_operator() { return "windows" == navigator.userAgent.toLowerCase().match(/windows/i) ? "pc" : "phone" } resize() { this.width = this.$playground.width(), this.height = this.$playground.height(); let t = Math.min(this.width / 8, this.height / 7); this.width = 8 * t, this.height = 7 * t, this.scale = this.height, MAGNIFICATION = this.height / BASE_SCREEN_HEIGHT, SCREEN_WIDTH = BASE_SCREEN_WIDTH * MAGNIFICATION, SCREEN_HEIGHT = BASE_SCREEN_HEIGHT * MAGNIFICATION, this.game_map && this.game_map.resize() } show() { this.$playground.show(), this.resize(), this.width = this.$playground.width(), this.height = this.$playground.height(), this.game_map = new GameMap(this) } hide() { this.game_map && this.game_map.destroy(), this.$playground.empty(), this.$playground.hide() } } class Settings { constructor(t) { this.root = t, this.platform = "WEB", this.root.AcWingOS && (this.platform = "ACAPP"), this.username = "", this.photo = "", this.$settings = $('\n<div class="ac-game-settings">\n    <div class="ac-game-settings-login">\n        <div class="ac-game-settings-title">\n            登录\n        </div>\n        <div class="ac-game-settings-username">\n            <div class="ac-game-settings-item">\n                <input type="text" placeholder="用户名">\n            </div>\n        </div>\n        <div class="ac-game-settings-password">\n            <div class="ac-game-settings-item">\n                <input type="password" placeholder="密码">\n            </div>\n        </div>\n        <div class="ac-game-settings-submit">\n            <div class="ac-game-settings-item">\n                <button>登录</button>\n            </div>\n        </div>\n        <div class="ac-game-settings-error-message">\n        </div>\n        <div class="ac-game-settings-option">\n            注册\n        </div>\n        <br>\n        <div class="ac-game-settings-acwing">\n            <img width="30" src="https://app1695.acapp.acwing.com.cn:4434/static/image/settings/acwing_logo.png">\n            <br>\n            <div>\n                AcWing一键登录\n            </div>\n        </div>\n    </div>\n    <div class="ac-game-settings-register">\n        <div class="ac-game-settings-title">\n            注册\n        </div>\n        <div class="ac-game-settings-username">\n            <div class="ac-game-settings-item">\n                <input type="text" placeholder="用户名">\n            </div>\n        </div>\n        <div class="ac-game-settings-password ac-game-settings-password-first">\n            <div class="ac-game-settings-item">\n                <input type="password" placeholder="密码">\n            </div>\n        </div>\n        <div class="ac-game-settings-password ac-game-settings-password-second">\n            <div class="ac-game-settings-item">\n                <input type="password" placeholder="确认密码">\n            </div>\n        </div>\n        <div class="ac-game-settings-submit">\n            <div class="ac-game-settings-item">\n                <button>注册</button>\n            </div>\n        </div>\n        <div class="ac-game-settings-error-message">\n        </div>\n        <div class="ac-game-settings-option">\n            登录\n        </div>\n        <br>\n        <div class="ac-game-settings-acwing">\n            <img width="30" src="https://app1695.acapp.acwing.com.cn:4434/static/image/settings/acwing_logo.png">\n            <br>\n            <div>\n                AcWing一键登录\n            </div>\n        </div>\n    </div>\n</div>\n    \n        '), this.$login = this.$settings.find(".ac-game-settings-login"), this.$login_username = this.$login.find(".ac-game-settings-username input"), this.$login_password = this.$login.find(".ac-game-settings-password input"), this.$login_submit = this.$login.find(".ac-game-settings-submit button"), this.$login_error_message = this.$login.find(".ac-game-settings-error-message"), this.$login_register = this.$login.find(".ac-game-settings-option"), this.$login.hide(), this.$register = this.$settings.find(".ac-game-settings-register"), this.$register_username = this.$register.find(".ac-game-settings-username input"), this.$register_password = this.$register.find(".ac-game-settings-password-first input"), this.$register_password_confirm = this.$register.find(".ac-game-settings-password-second input"), this.$register_submit = this.$register.find(".ac-game-settings-submit button"), this.$register_error_message = this.$register.find(".ac-game-settings-error-message"), this.$register_login = this.$register.find(".ac-game-settings-option"), this.$register.hide(), this.$acwing_login = this.$settings.find(".ac-game-settings-acwing img"), this.root.$ac_game.append(this.$settings), this.start() } start() { "ACAPP" === this.platform ? this.getinfo_acapp() : "WEB" === this.platform && (this.getinfo_web(), this.add_listening_events()) } add_listening_events() { let t = this; this.add_listening_events_login(), this.add_listening_events_register(), this.$acwing_login.click((function () { t.acwing_login() })) } add_listening_events_login() { let t = this; this.$login_register.click((function () { t.register() })), this.$login_submit.click((function () { t.login_on_remote() })) } add_listening_events_register() { let t = this; this.$register_login.click((function () { t.login() })), this.$register_submit.click((function () { t.register_on_remote() })) } acwing_login() { $.ajax({ url: "https://app1695.acapp.acwing.com.cn:4434/settings/acwing/web/apply_code/", type: "GET", success: function (t) { "success" === t.result && window.location.replace(t.apply_code_url) } }) } login_on_remote() { let t = this, s = this.$login_username.val(), i = this.$login_password.val(); this.$login_error_message.empty(), $.ajax({ url: "https://app1695.acapp.acwing.com.cn:4434/settings/login/", type: "GET", data: { username: s, password: i }, success: function (s) { "success" === s.result ? location.reload() : t.$login_error_message.html(s.result) } }) } register_on_remote() { let t = this, s = this.$register_username.val(), i = this.$register_password.val(), e = this.$register_password_confirm.val(); this.$register_error_message.empty(), $.ajax({ url: "https://app1695.acapp.acwing.com.cn:4434/settings/register/", type: "GET", data: { username: s, password: i, password_confirm: e }, success: function (s) { "success" === s.result ? location.reload() : t.$register_error_message.html(s.result) } }) } logout_on_remote() { "ACAPP" === this.platform ? this.root.AcWingOS.api.window.close() : $.ajax({ url: "https://app1695.acapp.acwing.com.cn:4434/settings/logout/", type: "GET", success: function (t) { "success" === t.result && location.reload() } }) } register() { this.$login.hide(), this.$register.show() } login() { this.$register.hide(), this.$login.show() } acapp_login(t, s, i, e) { let a = this; this.root.AcWingOS.api.oauth2.authorize(t, s, i, e, (function (t) { "success" === t.result && (a.username = t.username, a.photo = t.photo, a.hide(), a.root.menu.show()) })) } getinfo_acapp() { let t = this; $.ajax({ url: "https://app1695.acapp.acwing.com.cn:4434/settings/acwing/acapp/apply_code/", type: "GET", success: function (s) { "success" === s.result && t.acapp_login(s.appid, s.redirect_uri, s.scope, s.state) } }) } getinfo_web() { let t = this; $.ajax({ url: "https://app1695.acapp.acwing.com.cn:4434/settings/getinfo/", type: "GET", data: { platform: t.platform }, success: function (s) { "success" === s.result ? (t.username = s.username, t.photo = s.photo, t.hide(), t.root.menu.show()) : t.login() } }) } hide() { this.$settings.hide() } show() { this.$settings.show() } } export class AcGame { constructor(t, s) { this.id = t, this.$ac_game = $("#" + t), this.AcWingOS = s, this.settings = new Settings(this), this.menu = new AcGameMenu(this), this.playground = new AcGamePlayground(this), this.start() } start() { } }
